from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
    CallbackQuery,
    BotCommand
)
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
import asyncio
import requests
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN", "7651604716:AAHyoyFuCTtHRiX_birOQ2sgo9jOtmKV2tI")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —Ç–æ–∫–µ–Ω –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
SPONSORS = [
    "https://t.me/+ZWDMAtOj1c5jN2Jk",
    "https://t.me/+ZWDMAtOj1c5jN2Jk",
    "https://t.me/+ZWDMAtOj1c5jN2Jk",
    "https://t.me/+ZWDMAtOj1c5jN2Jk",
    "https://t.me/+t2OUM3mp0BphNzVi"
]

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
TEAM_LINK = "https://t.me/+UaMfr7uB405mMGNi"
WITHDRAW_LINK = "https://t.me/c/2350708541/5"
SHOP_LINK = "https://t.me/+t2OUM3mp0BphNzVi"
INFO_LINK = "https://t.me/c/2350708541/3"
PAYMENTS_LINK = "https://t.me/c/2350708541/5"
MANUAL_LINK = "https://t.me/c/2350708541/6"
CHAT_LINK = "https://t.me/c/2350708541/43"
TRAINING_LINK = "https://t.me/c/2350708541/48"

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏)
users = {}
stats = {"total_users": 0, "today_users": 0, "total_payouts": 0.0}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
sponsors_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚ò†Ô∏è –°–ø–æ–Ω—Å–æ—Ä 1", url=SPONSORS[0]),
        InlineKeyboardButton(text="‚ò†Ô∏è –°–ø–æ–Ω—Å–æ—Ä 2", url=SPONSORS[1])
    ],
    [InlineKeyboardButton(text="‚ò†Ô∏è –°–ø–æ–Ω—Å–æ—Ä 3", url=SPONSORS[2])],
    [
        InlineKeyboardButton(text="‚ò†Ô∏è –°–ø–æ–Ω—Å–æ—Ä 4", url=SPONSORS[3]),
        InlineKeyboardButton(text="‚ò†Ô∏è –°–ø–æ–Ω—Å–æ—Ä 5", url=SPONSORS[4])
    ],
    [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ", callback_data="check_subscription")]
])

control_panel_menu = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üíª –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"),
        InlineKeyboardButton(text="üìö –ú–∞–≥–∞–∑–∏–Ω", url=SHOP_LINK)
    ],
    [
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics"),
        InlineKeyboardButton(text="üìñ –û –±–æ—Ç–µ", callback_data="about_bot")
    ]
])

profile_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals"),
        InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏", url=WITHDRAW_LINK)
    ],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
])

about_bot_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", url=INFO_LINK),
        InlineKeyboardButton(text="üí∏ –í—ã–ø–ª–∞—Ç—ã", url=PAYMENTS_LINK)
    ],
    [
        InlineKeyboardButton(text="üìò –ú–∞–Ω—É–∞–ª", url=MANUAL_LINK),
        InlineKeyboardButton(text="üí¨ –ß–∞—Ç", url=CHAT_LINK)
    ],
    [InlineKeyboardButton(text="üéì –û–±—É—á–µ–Ω–∏–µ", url=TRAINING_LINK)],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
])

back_button = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
])

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user_status(referrals: int) -> str:
    if referrals < 50: return "–í–æ–∑—Ä–æ–∂–¥—ë–Ω–Ω—ã–π"
    elif referrals < 100: return "–ü—Ä–∏–∑—Ä–∞–∫"
    elif referrals < 250: return "–°–ø–µ–∫—Ç—Ä"
    elif referrals < 500: return "–§–∞–Ω—Ç–æ–º"
    else: return "–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π"

def get_today() -> str:
    return datetime.now().strftime("%Y-%m-%d")

def get_weekly_referrals(user_id: int) -> int:
    today = datetime.now()
    week_ago = today - timedelta(days=7)
    user_data = users.get(user_id, {})
    referral_stats = user_data.get("referral_stats", {})
    return sum(
        count for date, count in referral_stats.items()
        if week_ago.strftime("%Y-%m-%d") <= date <= today.strftime("%Y-%m-%d")
    )

# ... (–≤–µ—Å—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –¥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ /start –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ) ...

@dp.message(F.text.startswith("/start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    referrer_id = None

    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
        except ValueError:
            referrer_id = None

    if user_id not in users:
        users[user_id] = {
            "balance": 0.0,
            "referrals": 0,
            "referral_earnings": 0.0,
            "joined_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "ref_link": f"https://t.me/{(await bot.get_me()).username}?start={user_id}",
            "team_joined": False,
            "referral_stats": {},
            "referrer_id": referrer_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "subscription_checked": False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        }
        stats["total_users"] += 1
        stats["today_users"] += 1

        await message.answer(
            "‚úÖ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!",
            reply_markup=sponsors_keyboard
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.",
            reply_markup=control_panel_menu
        )

@dp.callback_query(F.data == "check_subscription")
async def check_subscription(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = users.get(user_id, {})

    await callback.message.edit_text(
        "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )
    await asyncio.sleep(2)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏ –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    if user_data and not user_data.get("subscription_checked"):
        referrer_id = user_data.get("referrer_id")

        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        user_data["subscription_checked"] = True

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if referrer_id and referrer_id in users:
            users[referrer_id]["referrals"] += 1
            users[referrer_id]["balance"] += 0.5
            users[referrer_id]["referral_earnings"] += 0.5

            today = get_today()
            if today not in users[referrer_id]["referral_stats"]:
                users[referrer_id]["referral_stats"][today] = 0
            users[referrer_id]["referral_stats"][today] += 1

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            try:
                await bot.send_message(
                    referrer_id,
                    f"üéâ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
                    f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ 0.5$\n"
                    f"üìä –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {users[referrer_id]['referrals']}"
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer_id}: {e}")

    await callback.message.edit_text(
        "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=TEAM_LINK)],
            [InlineKeyboardButton(text="–Ø –≤—Å—Ç—É–ø–∏–ª –≤ –∫–æ–º–∞–Ω–¥—É", callback_data="confirm_team_join")]
        ])
    )

@dp.callback_query(F.data == "confirm_team_join")
async def confirm_team_join(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = users.get(user_id, {})

    if user_data:
        if user_data.get("team_joined"):
            await callback.message.edit_text(
                "üéâ –í—ã —É–∂–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                reply_markup=control_panel_menu
            )
        else:
            user_data["team_joined"] = True

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –æ –ø–æ–ª–Ω–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            referrer_id = user_data.get("referrer_id")
            if referrer_id and referrer_id in users:
                try:
                    await bot.send_message(
                        referrer_id,
                        "üéØ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ!"
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer_id}: {e}")

            await callback.message.edit_text(
                "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                reply_markup=control_panel_menu
            )

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ) ...

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message(F.text.startswith("/start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    referrer_id = None

    if len(message.text.split()) > 1:
        try:
            referrer_id = int(message.text.split()[1])
        except ValueError:
            referrer_id = None

    if user_id not in users:
        users[user_id] = {
            "balance": 0.0,
            "referrals": 0,
            "referral_earnings": 0.0,
            "joined_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "ref_link": f"https://t.me/{(await bot.get_me()).username}?start={user_id}",
            "team_joined": False,
            "referral_stats": {}
        }
        stats["total_users"] += 1
        stats["today_users"] += 1

        if referrer_id and referrer_id in users:
            users[referrer_id]["referrals"] += 1
            users[referrer_id]["balance"] += 0.5
            users[referrer_id]["referral_earnings"] += 0.5

            today = get_today()
            if today not in users[referrer_id]["referral_stats"]:
                users[referrer_id]["referral_stats"][today] = 0
            users[referrer_id]["referral_stats"][today] += 1

        await message.answer(
            "‚úÖ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å!",
            reply_markup=sponsors_keyboard
        )
    else:
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.",
            reply_markup=control_panel_menu
        )

@dp.callback_query(F.data == "check_subscription")
async def check_subscription(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    )
    await asyncio.sleep(2)

    await callback.message.edit_text(
        "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", url=TEAM_LINK)],
            [InlineKeyboardButton(text="–Ø –≤—Å—Ç—É–ø–∏–ª –≤ –∫–æ–º–∞–Ω–¥—É", callback_data="confirm_team_join")]
        ])
    )

@dp.callback_query(F.data == "confirm_team_join")
async def confirm_team_join(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = users.get(user_id, {})

    if user_data:
        if user_data.get("team_joined"):
            await callback.message.edit_text(
                "üéâ –í—ã —É–∂–µ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                reply_markup=control_panel_menu
            )
        else:
            user_data["team_joined"] = True
            await callback.message.edit_text(
                "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É!",
                reply_markup=control_panel_menu
            )

@dp.callback_query(F.data == "profile")
async def profile_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = users.get(user_id, {})

    if user_data:
        status = get_user_status(user_data["referrals"])
        weekly_referrals = get_weekly_referrals(user_id)
        today_referrals = user_data["referral_stats"].get(get_today(), 0)

        message_text = (
            "‚ò†Ô∏è ùêÉùêûùêöùê≠ùê°ùê•ùêûùê¨ùê¨ ùêìùêûùêöùê¶\n\n"
            "üíª‚Äî–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
            f"‚î£üÜî –ú–æ–π ID: {user_id}\n"
            f"‚î£üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']}$\n"
            f"‚î£üèÜ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"‚î£üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {today_referrals}\n"
            f"‚î£üìÖ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_referrals}\n"
            f"‚î£üåü –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_data['referrals']}"
        )
        await callback.message.edit_text(message_text, reply_markup=profile_keyboard)

@dp.callback_query(F.data == "referrals")
async def referrals_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data = users.get(user_id, {})

    if user_data:
        referral_link = user_data["ref_link"]
        referrals_count = user_data["referrals"]
        message_text = (
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}\n"
            f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}"
        )
        await callback.message.edit_text(message_text, reply_markup=back_button)

@dp.callback_query(F.data == "statistics")
async def statistics_handler(callback: CallbackQuery):
    message_text = (
        "‚ò†Ô∏è ùêÉùêûùêöùê≠ùê°ùê•ùêûùê¨ùê¨ ùêìùêûùêöùê¶\n\n"
        "üìä‚Äî–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚î£–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚îó–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['today_users']}"
    )
    await callback.message.edit_text(message_text, reply_markup=back_button)

@dp.callback_query(F.data == "about_bot")
async def about_bot_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ò†Ô∏è ùêÉùêûùêöùê≠ùê°ùê•ùêûùê¨ùê¨ ùêìùêûùêöùê¶\n\nüìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ùêÉùêûùêöùê≠ùê°ùê•ùêûùê¨ùê¨ || ùêìùêûùêöùê¶",
        reply_markup=about_bot_keyboard
    )

@dp.callback_query(F.data == "back_to_main_menu")
async def back_to_main_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=control_panel_menu
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
